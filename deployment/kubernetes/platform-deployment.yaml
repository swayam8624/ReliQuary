apiVersion: apps/v1
kind: Deployment
metadata:
  name: reliquary-platform
  namespace: reliquary
  labels:
    app: reliquary-platform
    component: api
    version: v5.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: reliquary-platform
      component: api
  template:
    metadata:
      labels:
        app: reliquary-platform
        component: api
        version: v5.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/observability/metrics/export"
    spec:
      serviceAccountName: reliquary-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      containers:
        - name: reliquary-api
          image: reliquary/platform:v5.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
              name: http
              protocol: TCP
            - containerPort: 8080
              name: metrics
              protocol: TCP
          env:
            - name: ENVIRONMENT
              value: "production"
            - name: LOG_LEVEL
              value: "INFO"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: reliquary-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: reliquary-secrets
                  key: redis-url
            - name: JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: reliquary-secrets
                  key: jwt-secret-key
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: reliquary-secrets
                  key: encryption-key
            - name: PROMETHEUS_ENDPOINT
              value: "http://prometheus:9090"
            - name: JAEGER_ENDPOINT
              value: "http://jaeger-collector:14268/api/traces"
            - name: INFLUXDB_URL
              value: "http://influxdb:8086"
            - name: INFLUXDB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: reliquary-secrets
                  key: influxdb-token
            - name: INFLUXDB_ORG
              value: "reliquary"
            - name: INFLUXDB_BUCKET
              value: "metrics"
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /status
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
          startupProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            - name: temp-volume
              mountPath: /tmp
            - name: rust-modules
              mountPath: /app/rust_modules
              readOnly: true
        - name: agent-orchestrator
          image: reliquary/agent-orchestrator:v5.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8001
              name: agents
              protocol: TCP
          env:
            - name: AGENT_NETWORK_SIZE
              value: "100"
            - name: CONSENSUS_TIMEOUT
              value: "30"
            - name: BYZANTINE_TOLERANCE
              value: "33"
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: reliquary-secrets
                  key: redis-url
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /agents/health
              port: 8001
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /agents/ready
              port: 8001
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 2
      volumes:
        - name: config-volume
          configMap:
            name: reliquary-config
        - name: temp-volume
          emptyDir: {}
        - name: rust-modules
          configMap:
            name: reliquary-rust-modules
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: reliquary-platform
                topologyKey: kubernetes.io/hostname
      tolerations:
        - key: "reliquary.io/dedicated"
          operator: "Equal"
          value: "platform"
          effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: reliquary-platform-service
  namespace: reliquary
  labels:
    app: reliquary-platform
    component: api
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/observability/metrics/export"
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
      name: http
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: metrics
    - port: 8001
      targetPort: 8001
      protocol: TCP
      name: agents
  selector:
    app: reliquary-platform
    component: api
---
apiVersion: v1
kind: Service
metadata:
  name: reliquary-platform-lb
  namespace: reliquary
  labels:
    app: reliquary-platform
    component: loadbalancer
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 8000
      protocol: TCP
      name: http
    - port: 443
      targetPort: 8000
      protocol: TCP
      name: https
  selector:
    app: reliquary-platform
    component: api
  loadBalancerSourceRanges:
    - 10.0.0.0/8
    - 172.16.0.0/12
    - 192.168.0.0/16
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: reliquary-platform-ingress
  namespace: reliquary
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  tls:
    - hosts:
        - api.reliquary.io
        - platform.reliquary.io
      secretName: reliquary-tls
  rules:
    - host: api.reliquary.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: reliquary-platform-service
                port:
                  number: 8000
    - host: platform.reliquary.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: reliquary-platform-service
                port:
                  number: 8000
