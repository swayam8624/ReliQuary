# Production Deployment Configuration for ReliQuary Platform
# Complete Kubernetes deployment with security, scalability, and observability

apiVersion: apps/v1
kind: Deployment
metadata:
  name: reliquary-platform
  namespace: reliquary
  labels:
    app: reliquary-platform
    version: v5.0.0
    component: api-server
    tier: production
  annotations:
    deployment.kubernetes.io/revision: "1"
    reliquary.io/deployed-by: "production-deployment-system"
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: reliquary-platform
      component: api-server
  template:
    metadata:
      labels:
        app: reliquary-platform
        version: v5.0.0
        component: api-server
        security.policy: restricted
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: reliquary-platform-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: reliquary-api
          image: reliquary/platform:v5.0.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
              name: http
              protocol: TCP
            - containerPort: 8080
              name: metrics
              protocol: TCP
          env:
            - name: ENVIRONMENT
              value: "production"
            - name: LOG_LEVEL
              value: "INFO"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: reliquary-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: reliquary-secrets
                  key: redis-url
            - name: JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: reliquary-secrets
                  key: jwt-secret-key
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: reliquary-secrets
                  key: encryption-key
            - name: PROMETHEUS_ENDPOINT
              value: "http://prometheus:9090"
            - name: JAEGER_ENDPOINT
              value: "http://jaeger-collector:14268/api/traces"
            - name: TENANT_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['reliquary.io/tenant-id']
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health/startup
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: app-cache
              mountPath: /app/cache
            - name: config
              mountPath: /app/config
              readOnly: true
            - name: tls-certs
              mountPath: /app/certs
              readOnly: true
      volumes:
        - name: tmp
          emptyDir: {}
        - name: app-cache
          emptyDir:
            sizeLimit: 1Gi
        - name: config
          configMap:
            name: reliquary-config
        - name: tls-certs
          secret:
            secretName: reliquary-internal-tls-secret
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values: ["reliquary-platform"]
                topologyKey: kubernetes.io/hostname
      tolerations:
        - key: "reliquary.io/dedicated"
          operator: "Equal"
          value: "production"
          effect: "NoSchedule"
      nodeSelector:
        kubernetes.io/arch: amd64
        node.kubernetes.io/instance-type: m5.large

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reliquary-agent-orchestrator
  namespace: reliquary
  labels:
    app: reliquary-agent-orchestrator
    version: v5.0.0
    component: orchestrator
    tier: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: reliquary-agent-orchestrator
      component: orchestrator
  template:
    metadata:
      labels:
        app: reliquary-agent-orchestrator
        version: v5.0.0
        component: orchestrator
        security.policy: restricted
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: reliquary-orchestrator-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: agent-orchestrator
          image: reliquary/agent-orchestrator:v5.0.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8001
              name: http
              protocol: TCP
            - containerPort: 8080
              name: metrics
              protocol: TCP
          env:
            - name: ENVIRONMENT
              value: "production"
            - name: LOG_LEVEL
              value: "INFO"
            - name: AGENT_NETWORK_SIZE
              value: "7"
            - name: CONSENSUS_TIMEOUT
              value: "30"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: reliquary-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: reliquary-secrets
                  key: redis-url
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8001
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 8001
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: agent-data
              mountPath: /app/data
      volumes:
        - name: tmp
          emptyDir: {}
        - name: agent-data
          emptyDir:
            sizeLimit: 2Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values: ["reliquary-agent-orchestrator"]
                topologyKey: kubernetes.io/hostname

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: reliquary
  labels:
    app: postgresql
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
        component: database
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: postgresql
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
              name: postgresql
          env:
            - name: POSTGRES_DB
              value: "reliquary"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: password
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
            - name: postgresql-config
              mountPath: /etc/postgresql
              readOnly: true
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql-pvc
        - name: postgresql-config
          configMap:
            name: postgresql-config

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: reliquary
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
              name: redis
          command:
            - redis-server
            - /etc/redis/redis.conf
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config
              mountPath: /etc/redis
              readOnly: true
            - name: tmp
              mountPath: /tmp
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc
        - name: redis-config
          configMap:
            name: redis-config
        - name: tmp
          emptyDir: {}

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: reliquary
  labels:
    app: postgresql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: gp3-encrypted

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: reliquary
  labels:
    app: redis
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: gp3-encrypted

---
# ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: reliquary-config
  namespace: reliquary
data:
  app.yaml: |
    app:
      name: "ReliQuary Platform"
      version: "5.0.0"
      environment: "production"

    api:
      host: "0.0.0.0"
      port: 8000
      workers: 4
      timeout: 30

    consensus:
      timeout_seconds: 30
      retry_attempts: 3
      network_size: 7

    security:
      enforce_https: true
      cors_origins: ["https://*.reliquary.io"]
      rate_limiting: true

    observability:
      metrics_enabled: true
      tracing_enabled: true
      logging_level: "INFO"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: reliquary
data:
  postgresql.conf: |
    # PostgreSQL production configuration
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB

    # Security settings
    ssl = on
    ssl_cert_file = '/var/lib/postgresql/server.crt'
    ssl_key_file = '/var/lib/postgresql/server.key'

    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'all'
    log_min_duration_statement = 1000

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: reliquary
data:
  redis.conf: |
    # Redis production configuration
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300

    # Memory management
    maxmemory 512mb
    maxmemory-policy allkeys-lru

    # Persistence
    save 900 1
    save 300 10
    save 60 10000

    # Security
    protected-mode yes
    requirepass ${REDIS_PASSWORD}

    # Logging
    loglevel notice
    logfile ""

    # Performance
    databases 16

---
# Secrets (base64 encoded - replace with actual values)
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: reliquary
type: Opaque
data:
  username: cG9zdGdyZXM= # postgres
  password: c2VjdXJlUGFzcw== # securePass (replace in production)

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: reliquary
type: Opaque
data:
  password: cmVkaXNQYXNz # redisPass (replace in production)
