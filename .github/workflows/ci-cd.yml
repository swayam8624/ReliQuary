name: ReliQuary CI/CD Pipeline

on:
  push:
    branches: [main, develop, "release/*"]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: reliquary

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          npm install -g snarkjs

      - name: Build Rust modules
        run: |
          cd rust_modules/encryptor
          cargo build --release
          cd ../merkle  
          cargo build --release
          cd ../../

      - name: Run security audit
        run: |
          poetry run safety check
          cargo audit

      - name: Run linting
        run: |
          poetry run flake8 .
          poetry run black --check .
          cargo fmt --check
          cargo clippy -- -D warnings

      - name: Run unit tests
        run: |
          poetry run pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for platform image
        id: meta-platform
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/platform
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.platform
          push: true
          tags: ${{ steps.meta-platform.outputs.tags }}
          labels: ${{ steps.meta-platform.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for orchestrator image
        id: meta-orchestrator
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/orchestrator
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push orchestrator image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.agent-orchestrator
          push: true
          tags: ${{ steps.meta-orchestrator.outputs.tags }}
          labels: ${{ steps.meta-orchestrator.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install performance testing tools
        run: |
          pip install locust pytest-benchmark

      - name: Run performance benchmarks
        run: |
          python scripts/performance_benchmark.py

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubectl for staging
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          kubectl apply -f deployment/kubernetes/ --namespace=reliquary-staging
          kubectl rollout status deployment/reliquary-platform --namespace=reliquary-staging --timeout=300s

      - name: Run integration tests
        run: |
          python scripts/integration_test.py --environment=staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubectl for production
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production with canary
        run: |
          # Deploy canary (10% traffic)
          kubectl apply -f deployment/kubernetes/canary-deployment.yaml
          kubectl rollout status deployment/reliquary-platform-canary --namespace=reliquary --timeout=300s

          # Run canary validation
          python scripts/canary_validation.py

          # Full deployment
          kubectl apply -f deployment/kubernetes/
          kubectl rollout status deployment/reliquary-platform --namespace=reliquary --timeout=600s

      - name: Notify deployment success
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"âœ… ReliQuary v${{ github.sha }} deployed to production successfully!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
