# Container Security Scanning Workflow
# Comprehensive security analysis for Docker images

name: Container Security Scan

on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      image-tag:
        required: true
        type: string
  schedule:
    # Daily security scans at 02:00 UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      image-name:
        description: "Image name to scan"
        required: true
        default: "reliquary/platform"
      image-tag:
        description: "Image tag to scan"
        required: true
        default: "latest"

env:
  SCAN_IMAGE: ${{ inputs.image-name || 'reliquary/platform' }}:${{ inputs.image-tag || 'latest' }}

jobs:
  # Trivy vulnerability scanner
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.SCAN_IMAGE }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"
          exit-code: "0" # Don't fail on vulnerabilities for now

      - name: Run Trivy vulnerability scanner (JSON output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.SCAN_IMAGE }}
          format: "json"
          output: "trivy-results.json"
          severity: "CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Generate Trivy HTML report
        run: |
          docker run --rm -v $(pwd):/work \
            aquasec/trivy:latest \
            image --format template --template '@contrib/html.tpl' \
            --output /work/trivy-report.html \
            ${{ env.SCAN_IMAGE }}

      - name: Upload Trivy reports
        uses: actions/upload-artifact@v3
        with:
          name: trivy-reports
          path: |
            trivy-results.sarif
            trivy-results.json
            trivy-report.html
          retention-days: 30

  # Snyk vulnerability scanner
  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.SCAN_IMAGE }}
          args: --severity-threshold=medium --file=docker/Dockerfile

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Grype vulnerability scanner
  grype-scan:
    name: Grype Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Run Grype vulnerability scanner
        run: |
          grype ${{ env.SCAN_IMAGE }} -o sarif > grype-results.sarif
          grype ${{ env.SCAN_IMAGE }} -o json > grype-results.json
          grype ${{ env.SCAN_IMAGE }} -o table > grype-results.txt

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "grype-results.sarif"

      - name: Upload Grype reports
        uses: actions/upload-artifact@v3
        with:
          name: grype-reports
          path: |
            grype-results.sarif
            grype-results.json
            grype-results.txt
          retention-days: 30

  # Hadolint Dockerfile linting
  hadolint-scan:
    name: Dockerfile Lint (Hadolint)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload Hadolint scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: hadolint-results.sarif

  # Docker Scout security analysis
  docker-scout-scan:
    name: Docker Scout Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Analyze image with Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.SCAN_IMAGE }}
          sarif-file: scout-results.sarif
          summary: true

      - name: Upload Docker Scout results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: scout-results.sarif

  # Custom security checks
  custom-security-checks:
    name: Custom Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull and inspect image
        run: |
          docker pull ${{ env.SCAN_IMAGE }}

          # Check if running as root
          echo "=== Checking if image runs as root ==="
          if docker run --rm ${{ env.SCAN_IMAGE }} whoami | grep -q "^root$"; then
            echo "WARNING: Image runs as root user"
            exit 1
          else
            echo "PASS: Image runs as non-root user"
          fi

          # Check for sensitive files
          echo "=== Checking for sensitive files ==="
          SENSITIVE_FILES=$(docker run --rm ${{ env.SCAN_IMAGE }} find / -name "*.key" -o -name "*.pem" -o -name "id_rsa" -o -name "id_dsa" 2>/dev/null | wc -l)
          if [ "$SENSITIVE_FILES" -gt 0 ]; then
            echo "WARNING: Found $SENSITIVE_FILES potentially sensitive files"
            docker run --rm ${{ env.SCAN_IMAGE }} find / -name "*.key" -o -name "*.pem" -o -name "id_rsa" -o -name "id_dsa" 2>/dev/null
          else
            echo "PASS: No sensitive files found"
          fi

          # Check for package managers (should be minimal)
          echo "=== Checking for package managers ==="
          PKG_MANAGERS=$(docker run --rm ${{ env.SCAN_IMAGE }} sh -c 'command -v apt || command -v yum || command -v apk || command -v dnf' | wc -l)
          if [ "$PKG_MANAGERS" -gt 1 ]; then
            echo "INFO: Found package managers (expected for non-minimal images)"
          else
            echo "PASS: Minimal package managers found"
          fi

          # Check image size
          echo "=== Checking image size ==="
          IMAGE_SIZE=$(docker images ${{ env.SCAN_IMAGE }} --format "{{.Size}}")
          echo "Image size: $IMAGE_SIZE"

      - name: Run CIS Benchmark checks
        run: |
          # Install Docker Bench for Security
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security

          # Run checks on our image
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/docker-bench-security \
            --workdir /docker-bench-security \
            docker/docker-bench-security:latest \
            sh docker-bench-security.sh -c container_images -i ${{ env.SCAN_IMAGE }}

  # Compliance and policy checks
  policy-scan:
    name: Policy and Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Conftest
        run: |
          wget https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_Linux_x86_64.tar.gz
          tar xzf conftest_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin

      - name: Run OPA policy checks
        run: |
          # Create OPA policies for container security
          mkdir -p policies

          cat > policies/security.rego << 'EOF'
          package container.security

          # Deny running as root
          deny[msg] {
            input.User == "root"
            msg := "Container should not run as root user"
          }

          # Require health checks
          deny[msg] {
            not input.Config.Healthcheck
            msg := "Container should have health checks configured"
          }

          # Check for exposed sensitive ports
          sensitive_ports := [22, 23, 135, 445, 1433, 3389]
          deny[msg] {
            port := input.Config.ExposedPorts[_]
            port_num := to_number(split(port, "/")[0])
            port_num in sensitive_ports
            msg := sprintf("Sensitive port %d should not be exposed", [port_num])
          }
          EOF

          # Inspect image and run policy checks
          docker inspect ${{ env.SCAN_IMAGE }} > image-config.json
          conftest verify --policy policies/ image-config.json

  # Generate comprehensive security report
  generate-security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs:
      [
        trivy-scan,
        snyk-scan,
        grype-scan,
        hadolint-scan,
        docker-scout-scan,
        custom-security-checks,
        policy-scan,
      ]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v3
        with:
          path: scan-results

      - name: Generate comprehensive security report
        run: |
          mkdir -p security-report

          cat > security-report/summary.md << 'EOF'
          # Container Security Scan Report

          **Image**: `${{ env.SCAN_IMAGE }}`
          **Scan Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository**: ${{ github.repository }}
          **Commit**: ${{ github.sha }}

          ## Summary

          This report contains the results of multiple security scanning tools:

          - **Trivy**: Vulnerability scanner for containers
          - **Snyk**: Commercial vulnerability scanner
          - **Grype**: Anchore vulnerability scanner
          - **Hadolint**: Dockerfile linter
          - **Docker Scout**: Docker's security analysis
          - **Custom Checks**: Custom security validation
          - **Policy Scan**: OPA policy compliance

          ## Recommendations

          1. Review all CRITICAL and HIGH severity vulnerabilities
          2. Update base images to latest stable versions
          3. Follow Docker security best practices
          4. Implement runtime security monitoring
          5. Regular security scanning in CI/CD pipeline

          ## Links

          - [Security Documentation](https://docs.reliquary.io/security)
          - [Vulnerability Disclosure](https://github.com/${{ github.repository }}/security/policy)
          - [Security Contact](mailto:security@reliquary.io)

          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report/
          retention-days: 90

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report/summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${report}`
            });

  # Notify security team on critical vulnerabilities
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [trivy-scan, snyk-scan, grype-scan]
    if: failure()
    steps:
      - name: Send security alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#security-alerts"
          text: |
            🚨 CRITICAL: Security vulnerabilities found in container image

            **Image**: ${{ env.SCAN_IMAGE }}
            **Repository**: ${{ github.repository }}
            **Branch**: ${{ github.ref_name }}
            **Commit**: ${{ github.sha }}

            Please review the security scan results immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
